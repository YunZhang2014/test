{"version":3,"file":"runtime.js","sources":["utils/url.js","utils/tag.js","initial.js","console.js","utils/cookies.js","editors.js","runtime.js"],"sourcesContent":["/**\n *  RxJS in action\n *  Chapter #\n *  @author Paul Daniels\n *  @author Luis Atencio\n */\nexport function getUrlParams(url) {\n  let match,\n    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n    search = /([^&=]+)=?([^&]*)/g,\n    decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n    query  = url.substring(1);\n\n  const urlParams = {};\n  while (match = search.exec(query))\n    urlParams[decode(match[1])] = decode(match[2]);\n\n  return urlParams;\n}","/**\n *  RxJS in action\n *  Chapter #\n *  @author Paul Daniels\n *  @author Luis Atencio\n */\nexport function buildTag(tagName, options, transform = x => x) {\n  return (source) => {\n    const attrs = [];\n    for (let k in options) {\n      options.hasOwnProperty(k) && attrs.push(`${k}=\"${options[k]}\"`);\n    }\n\n    return `<${tagName} ${attrs.join(' ')}>${transform(source)}</${tagName}>`;\n  };\n}","/**\n *  RxJS in action\n *  Chapter #\n *  @author Paul Daniels\n *  @author Luis Atencio\n */\nexport const defaultHtml =\n  `\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title>RxJS in Action</title>\n  </head>\n  <body></body>\n</html>\n`.trim();","/**\n *  RxJS in action\n *  Chapter #\n *  @author Paul Daniels\n *  @author Luis Atencio\n */\nexport function consoleProxy(console = window.console) {\n  if(console && console.log) {\n    //Set up iframe for redirection\n    let iframe = parent.document.getElementById('console');\n    let consoleFrame = iframe.contentWindow || iframe.contentDocument;\n    if (consoleFrame.document) consoleFrame = consoleFrame.document;\n    let write = (frame => {\n      return content => {\n        frame.open();\n        frame.write(content);\n        frame.close();\n      };\n    })(consoleFrame);\n    write(''); // clear contents on change\n\n    window.console = {\n      log: (val) => {\n        let previous = consoleFrame.body.innerHTML || '';\n        write(previous.trim() + \"<br />\" + val);\n      },\n      warn: (val) => {\n        let previous = consoleFrame.body.innerHTML || '';\n        write(previous.trim() + \"<br />\" + val);\n      },\n      error: (val) => {\n        let previous = consoleFrame.body.innerHTML || '';\n        write(previous.trim() + \"<br />\" + val);\n      }\n    };\n  }\n}","/**\n *  RxJS in action\n *  Chapter #\n *  @author Paul Daniels\n *  @author Luis Atencio\n */\n\nimport { Observable, Subject } from 'rxjs';\n\nclass CookieManager {\n  constructor() {\n    this._changed = new Subject();\n  }\n  _notifyChanged(key) {\n    this._changed.next(key);\n  }\n  setCookie(key, value, opts = {}) {\n    const {path, expires} = opts;\n    let cookie = [`${key}=${value}`];\n    path && cookie.push(`path=${path}`);\n    expires && cookie.push(`expires=${expires}`);\n    document.cookie = cookie.join('; ');\n    this._notifyChanged(key);\n  }\n\n  static removeCookie(key) {\n    document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\n  }\n\n  getCookie(key) {\n    return Observable.defer(() => {\n      const cookies = document.cookie;\n      const cookieStart = cookies.indexOf(key);\n\n      if (cookieStart < 0)\n        return Observable.empty();\n      else {\n        const valueStart = cookies.indexOf('=', cookieStart) + 1;\n        let cookieEnd = cookies.indexOf(';', cookieStart);\n        cookieEnd = cookieEnd < 0 ? cookies.length : cookieEnd;\n\n        return Observable.of(cookies.substring(valueStart, cookieEnd));\n      }\n    });\n  }\n\n  watchCookie(key) {\n    return this._changed.asObservable()\n      .filter(x => key === x)\n      .startWith(key)\n      .flatMapTo(this.getCookie(key));\n  }\n}\n\nexport const cookies = new CookieManager();","/**\n *  RxJS in action\n *  Chapter #\n *  @author Paul Daniels\n *  @author Luis Atencio\n */\n'use strict';\n\nimport {getUrlParams} from './utils/url';\nimport {buildTag} from \"./utils/tag\";\nimport {defaultHtml} from \"./initial\";\nimport {consoleProxy} from \"./console\";\nimport {cookies} from './utils/cookies';\nimport { Observable } from 'rxjs';\nimport $ from 'jquery';\nimport CodeMirror from 'codemirror';\n\ncookies.watchCookie('example')\n  .subscribe(x => console.log(`Cookie is ${x}`));\n\ncookies.setCookie('example', '7.2');\n\ncookies.setCookie('example', '7.3');\n\ncookies.setCookie('example', '8.1');\n\nObservable.of('css', 'html', 'javascript')\n  .flatMap(\n    tag => Observable.fromEvent(document.getElementById('show-' + tag), 'click'),\n    (tag, value) => ({tag, el: value.target}))\n  .subscribe(({el, tag}) => {\n    const {classList, id} = el;\n\n    classList.toggle('btn-primary');\n    classList.toggle('btn-default');\n    classList.toggle('active');\n\n    document.getElementById(tag + '-container').classList.toggle('hidden');\n  });\n\n// Builds a new code editor on the page\nconst jsEditor = CodeMirror.fromTextArea(document.getElementById('javascript'), {\n  mode: \"javascript\",\n  theme: 'dracula',\n  lineNumbers: true,\n  readOnly: false,\n  value: 'Test'\n});\n\nconst htmlEditor = CodeMirror.fromTextArea(document.getElementById('html'), {\n  mode: 'htmlmixed',\n  theme: 'dracula',\n  lineNumbers: true,\n});\n\nhtmlEditor.setValue(defaultHtml);\n\nconst cssEditor = CodeMirror.fromTextArea(document.getElementById('css'), {\n  mode: 'css',\n  theme: 'dracula',\n  lineNumbers: true\n});\n\nconst exampleSelector = document.getElementById('example-change');\n\n// Url params always take precedence over the cookies\nconst urlParams = getUrlParams(window.location.search);\n\nObservable.from(exampleSelector.getElementsByTagName('option'))\n  .filter(({value}) => value === urlParams['example'])\n  .take(1)\n  .subscribe(x => x.selected = 'selected');\n\nconst startWithIfPresent =\n  (url, key) =>\n    source =>\n      url[key] ? source.startWith(url[key]) : source;\n\nObservable.fromEvent(\n  exampleSelector,\n  'change',\n  (e) => e.target.value\n)\n  .let(startWithIfPresent(urlParams, 'example'))\n  .map((e) => e.split('.')) // Split the chapter and id\n  .filter(value => value.length === 2) // Sanity check\n  .flatMap(([chapter, id]) => {\n    return $.getJSON(`/rest/api/example/${chapter}/${id}`);\n  })\n  .subscribe(({js, css, html}) => {\n    js && jsEditor.setValue(js);\n    css && cssEditor.setValue(css);\n    html && htmlEditor.setValue(html);\n  });\n\nconst onCodeChange = (tag) => () => {\n  console.log(tag, '[UPDATE]: CODE CHANGE', Date.now());\n};\n\nconst html$ = Observable.fromEvent(htmlEditor.doc, 'change',\n  (instance, change) => instance.getValue())\n  .do(onCodeChange('html'))\n  .startWith(defaultHtml)\n  .debounceTime(1000);\n\n// Babel compiler options\nconst compile$ = Observable.of({\n  presets: ['es2015'],\n  // TODO Compile this separately and load independently\n  plugins: [\n    [\"transform-object-rest-spread\", {\"useBuiltIns\": true}]\n  ]\n});\n\nconst js$ = Observable.fromEvent(jsEditor, 'change',\n  (instance, change) => instance.getValue())\n  .do(onCodeChange('js'))\n  .startWith('console.log(\"Welcome to RxJS in Action Code!\")')\n  .debounceTime(1000)\n  .do(() => console.log('Compiling...'))\n  .combineLatest(compile$, (code, opts) => {\n    try {\n      return Babel.transform(code, opts).code\n    } catch (e) {\n      console.warn('Problem compiling the code', e);\n      //FIXME Probably should not be returning code that babel doesn't even know how to compile\n      return code;\n    }\n  })\n  .map(buildTag('script', {type: 'application/javascript'}, function (code) {\n    //Naive way of preventing this from polluting the global namespace\n    return `;(${consoleProxy.toString().trim()})();\n      (function wrapper() {\n            ${code}\\n\n      })()\\n`;\n  }));\n  // .map(code =>\n  //   buildTag('script', {\n  //     type: 'application/javascript',\n  //     src: 'babel-polyfill/dist/polyfill.min.js'\n  //   })(' ') + '\\n' + code\n  // );\n\nconst css$ = Observable.fromEvent(cssEditor, 'change',\n  (instance, change) => instance.getValue())\n  .do(onCodeChange('css'))\n  .startWith('')\n  .debounceTime(1000)\n  .map(buildTag('style'));\n\nconst update$ = js$.combineLatest(html$, css$,\n  (javascript, html, css) => ({html, javascript, css}));\n\nexport const runtime$ = update$\n  .debounceTime(1000)\n  .do(onCodeChange('combined'))\n  .map(contents => {\n    const {javascript, html, css} = contents;\n    let builder = [];\n\n    try {\n      const endOfHead = html.indexOf('</head>');\n      const endOfBody = html.indexOf('</body>');\n\n      const beforeCss = html.substring(0, endOfHead);\n      const afterCss = html.substring(endOfHead, endOfBody);\n      const afterJs = html.substring(endOfBody);\n\n      builder.push(beforeCss);\n      builder.push(css);\n      builder.push(afterCss);\n\n      builder.push(javascript);\n      builder.push(afterJs);\n    } catch (e) {\n      console.log('Could not render content! ', e);\n    }\n\n    return builder.join('\\n');\n  });\n","/**\n *  RxJS in action\n *  Chapter #\n *  @author Paul Daniels\n *  @author Luis Atencio\n */\n'use strict';\n\nimport {runtime$} from './editors';\nimport $ from 'jquery';\n\n// Get the contents of the iframe\nconst doc = $('#output').contents();\n\nruntime$.subscribe(\n  content => {\n    // Rewrites the contents of the iframe\n    // Prevents carry over from previous examples\n    doc[0].open();\n    doc[0].write(content);\n    doc[0].close();\n  },\n  err => {\n    console.warn(\"Something went wrong! Please refresh the page.\", err)\n  });\n"],"names":["getUrlParams","url","match","pl","decode","s","decodeURIComponent","replace","query","substring","urlParams","search","exec","buildTag","tagName","options","transform","x","source","attrs","k","hasOwnProperty","push","join","defaultHtml","trim","consoleProxy","console","window","log","iframe","parent","document","getElementById","consoleFrame","contentWindow","contentDocument","write","open","content","close","val","previous","body","innerHTML","CookieManager","_changed","Subject","key","next","value","opts","path","expires","cookie","_notifyChanged","Observable","defer","cookies","cookieStart","indexOf","empty","valueStart","cookieEnd","length","of","asObservable","filter","startWith","flatMapTo","getCookie","watchCookie","subscribe","setCookie","flatMap","fromEvent","tag","el","target","classList","id","toggle","jsEditor","CodeMirror","fromTextArea","htmlEditor","setValue","cssEditor","exampleSelector","location","from","getElementsByTagName","take","selected","startWithIfPresent","e","let","map","split","chapter","$","getJSON","js","css","html","onCodeChange","Date","now","html$","doc","instance","change","getValue","do","debounceTime","compile$","js$","combineLatest","code","Babel","warn","type","toString","css$","update$","javascript","runtime$","contents","builder","endOfHead","endOfBody","beforeCss","afterCss","afterJs","err"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}